---
interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
}

const { src, alt, class: className, width = 800, height = 600 } = Astro.props;
---

<div class={`relative overflow-hidden rounded-2xl shadow-soft ${className}`}>
  <div 
    class="absolute inset-0 bg-gray-200 animate-pulse"
    style="animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite"
  ></div>
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading="lazy"
    decoding="async"
    class="w-full h-full object-cover transition-opacity duration-300 ease-in-out opacity-0"
    onload="this.classList.remove('opacity-0')"
  />
</div>

<style>
  @keyframes pulse {
    0%, 100% {
      opacity: 0.2;
    }
    50% {
      opacity: 0.3;
    }
  }

  img {
    backface-visibility: hidden;
    transform: translateZ(0);
    -webkit-font-smoothing: subpixel-antialiased;
  }
</style>

<script>
  // Optimisation du chargement des images
  const images = document.querySelectorAll('img[loading="lazy"]');
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        if (img.dataset.src) {
          img.src = img.dataset.src;
        }
        observer.unobserve(img);
      }
    });
  });

  images.forEach(img => {
    imageObserver.observe(img);
  });
</script>